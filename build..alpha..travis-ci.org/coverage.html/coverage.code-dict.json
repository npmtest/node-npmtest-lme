{"/home/travis/build/npmtest/node-npmtest-lme/test.js":"/* istanbul instrument in package npmtest_lme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lme/lib.npmtest_lme.js":"/* istanbul instrument in package npmtest_lme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_lme = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_lme = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-lme/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-lme && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_lme */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_lme\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_lme.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_lme.rollup.js'] =\n            local.assetsDict['/assets.npmtest_lme.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_lme.__dirname + '/lib.npmtest_lme.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-lme/node_modules/lme/index.js":"'use strict';\r\n\r\nvar config = require('./src/config');\r\nvar loggingFunctions = require('./src/loggingFunctions');\r\n\r\nfunction getLogLevel() {\r\n\tvar level = process.env.LOG_LEVEL;\r\n\tif (level) {\r\n\t\tlevel = config._logLevels[level.toLowerCase()].level;\r\n\t}\r\n\treturn level || config._logLevels.trace.level;\r\n}\r\n\r\nfunction meetsLogLevelRequirement(loggerLevel) {\r\n\treturn loggerLevel <= getLogLevel();\r\n}\r\n\r\nfunction createLogFunction(loggingFunctionParams) {\r\n\tif (loggingFunctionParams.type === config._types.log) {\r\n\t\treturn function() {\r\n\t\t\tif (meetsLogLevelRequirement(loggingFunctionParams.level)) {\r\n\t\t\t\tloggingFunctionParams.logFunction(loggingFunctionParams.color, arguments);\r\n\t\t\t}\r\n\t\t};\r\n\t} else if (loggingFunctionParams.type === config._types.line) {\r\n\t\treturn function(char, length) {\r\n\t\t\tif (meetsLogLevelRequirement(loggingFunctionParams.level)) {\r\n\t\t\t\tloggingFunctionParams.logFunction(char, length, m.e, m.w, loggingFunctionParams.color);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\nvar m = {};\r\nloggingFunctions.forEach(function(loggingFunctionParams) {\r\n\tm[loggingFunctionParams.functionName] = createLogFunction(loggingFunctionParams);\r\n});\r\n\r\nmodule.exports = m;\r\n","/home/travis/build/npmtest/node-npmtest-lme/node_modules/lme/src/config.js":"var chalk = require('chalk');\r\n\r\n// Produce overrided configuration\r\nfunction getChalkColors(defaultConfig, overrideConfig) {\r\n\tvar effectiveConfig = Object.assign({}, defaultConfig, overrideConfig);\r\n\r\n\t// make the effectiveConfig understandable to chalk\r\n\t// and return it\r\n\treturn buildChalkFunction(effectiveConfig);\r\n}\r\n\r\nfunction buildChalkFunction(config) {\r\n\tvar chalkColors = {};\r\n\tfor (var outputMethod in config) {\r\n\t\tif (config.hasOwnProperty(outputMethod)) {\r\n\t\t\tvar colorFunc = chalk;\r\n\t\t\t//build up the chalk function\r\n\t\t\ttry {\r\n\t\t\t\tconfig[outputMethod].forEach(function(style) {\r\n\t\t\t\t\tcolorFunc = colorFunc[style];\r\n\t\t\t\t});\r\n\t\t\t\tif (typeof colorFunc === 'undefined') {\r\n\t\t\t\t\tthrow new Error('Unsupported colorFunc');\r\n\t\t\t\t}\r\n\t\t\t\tchalkColors[outputMethod] = colorFunc;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.log('Error setting style for ' + outputMethod + '. Will use default style.');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn chalkColors;\r\n}\r\n\r\n// require default configuration\r\nvar configInput = require('../lmeDefaultConfig.json');\r\nvar providedConfig = {};\r\ntry {\r\n\t// try to get the config file from root file of the application.\r\n\tprovidedConfig = require('app-root-path').require('lmeconfig.json');\r\n\t// mock providedConfig here for test cases.\r\n\t// providedConfig = {...}\r\n\r\n} catch (e) {\r\n\t//it is okay if no override file is provided\r\n}\r\n\r\nif (!providedConfig.colors) {\r\n\tprovidedConfig = {\r\n\t\tcolors: {\r\n\t\t\tlogs: {},\r\n\t\t\tlines: {}\r\n\t\t}\r\n\t};\r\n}\r\n\r\n// get color info for logs\r\nconfigInput.colors.logs = getChalkColors(configInput.colors.logs, providedConfig.colors.logs);\r\n\r\n// get color info for lines\r\nconfigInput.colors.lines = getChalkColors(configInput.colors.lines, providedConfig.colors.lines);\r\n\r\nconfigInput._logLevels = {\r\n\t'trace': { level: 7, letter: 't' },\r\n\t'info': { level: 6, letter: 'i' },\r\n\t'success': { level: 5, letter: 's' },\r\n\t'warning': { level: 4, letter: 'w' },\r\n\t'error': { level: 3, letter: 'e' },\r\n\t'highlight': { level: 2, letter: 'h' },\r\n\t'default': { level: 1, letter: 'd' }\r\n};\r\nconfigInput._types = {\r\n\t'log': 0,\r\n\t'line': 1\r\n};\r\nmodule.exports = configInput;\r\n","/home/travis/build/npmtest/node-npmtest-lme/node_modules/lme/src/loggingFunctions.js":"var logUtil = require('./logUtil');\r\nvar linesUtil = require('./linesUtil');\r\nvar config = require('./config');\r\n\r\nvar loggingFunctions = [];\r\nObject.keys(config._logLevels).forEach(function(logLevel) {\r\n\r\n\tloggingFunctions.push({\r\n\t\tlogFunction: logLevel === 'trace' ? logUtil.logTraceWithColor : logUtil.logWithColor,\r\n\t\tlevel: config._logLevels[logLevel].level,\r\n\t\tfunctionName: config._logLevels[logLevel].letter,\r\n\t\tcolor: config.colors.logs[logLevel],\r\n\t\ttype: config._types.log\r\n\t});\r\n\tloggingFunctions.push({\r\n\t\tlogFunction: logLevel === 'trace' ? linesUtil.logLineWithTrace : linesUtil.logLine,\r\n\t\tlevel: config._logLevels[logLevel].level,\r\n\t\tfunctionName: config._logLevels[logLevel].letter + 'line',\r\n\t\tcolor: config.colors.lines[logLevel],\r\n\t\ttype: config._types.line\r\n\t});\r\n});\r\n\r\n//lines have an extra default function\r\nloggingFunctions.push({\r\n\tlogFunction: linesUtil.logLine,\r\n\tlevel: config._logLevels.default.level,\r\n\tfunctionName: 'line',\r\n\tcolor: config.colors.lines.default,\r\n\ttype: config._types.line\r\n});\r\n\r\nmodule.exports = loggingFunctions;\r\n","/home/travis/build/npmtest/node-npmtest-lme/node_modules/lme/src/logUtil.js":"function getMessageArgs(args) {\r\n\targs = Array.prototype.slice.call(args, 1);\r\n\treturn Array.prototype.slice.call(args[0]);\r\n}\r\n\r\nfunction logWithColor(colorFunc) {\r\n\tvar args = getMessageArgs(arguments);\r\n\tlogMessage(colorFunc, args, console.log);\r\n}\r\n\r\nfunction logTraceWithColor(colorFunc) {\r\n\tvar args = getMessageArgs(arguments);\r\n\r\n\tconsole.log(colorFunc('\\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< BEGIN'));\r\n\tlogMessage(colorFunc, args, console.trace);\r\n\tconsole.log(colorFunc('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> END\\n'));\r\n}\r\n\r\nfunction logMessage(colorFunc, msgArgs, consoleFunc) {\r\n\tvar outputArgs = [];\r\n\r\n\tmsgArgs.forEach(function(arg) {\r\n\t\tif ((typeof(arg) === 'object')&& !(arg instanceof Error)) {\r\n\t\t\toutputArgs.push('\\n' + JSON.stringify(arg, null, 2));\r\n\t\t} else {\r\n\t\t\toutputArgs.push(arg);\r\n\t\t}\r\n\t});\r\n\tconsoleFunc(colorFunc.apply(this, outputArgs));\r\n}\r\n\r\nmodule.exports = {\r\n\tlogWithColor: logWithColor,\r\n\tlogTraceWithColor: logTraceWithColor\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-lme/node_modules/lme/src/linesUtil.js":"var defaultChar = '-';\r\nvar defaultLength = 30;\r\n\r\nfunction getChar(char, errLogFunc) {\r\n\tif (!char) {\r\n\t\tchar = defaultChar;\r\n\t} else if (typeof(char) == 'object') {\r\n\t\terrLogFunc('ERROR: the line() functions can\\'t accept objects!');\r\n\t\tchar = defaultChar; //continue working with default behaviour.\r\n\t}\r\n\r\n\treturn char;\r\n}\r\n\r\nfunction getLength(length/*, warnLogFunc*/) {\r\n\tif (!length) {\r\n\t\tlength = defaultLength;\r\n\t} else if (length > 100) {\r\n\t\t// warnLogFunc(\"WARNING: \");\r\n\t}\r\n\r\n\treturn length;\r\n}\r\n\r\nfunction buildLine(char, length) {\r\n\tvar theLine = '';\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\ttheLine = theLine + char;\r\n\t}\r\n\treturn theLine;\r\n}\r\n\r\nfunction createLine(char, length, errLogFunc, warnLogFunc) {\r\n\tvar options = {};\r\n\toptions.char = getChar(char, errLogFunc);\r\n\toptions.length = getLength(length, warnLogFunc);\r\n\treturn buildLine(options.char, options.length);\r\n}\r\n\nfunction buildAndLog(char, length, errLogFunc, warnLogFunc, colorFunc, consoleFunc) {\n\tvar theLine = createLine(char, length, errLogFunc, warnLogFunc);\n\n\tif (colorFunc) {\n\t\ttheLine = colorFunc(theLine);\n\t}\n\n\tconsoleFunc(theLine);\n}\n\nfunction logLine(char, length, errLogFunc, warnLogFunc, colorFunc) {\r\n\tbuildAndLog(char, length, errLogFunc, warnLogFunc, colorFunc, console.log);\n}\r\n\nfunction logLineWithTrace(char, length, errLogFunc, warnLogFunc, colorFunc) {\n\tbuildAndLog(char, length, errLogFunc, warnLogFunc, colorFunc, console.trace);\n}\n\nmodule.exports = {\r\n\tlogLine: logLine,\n\tlogLineWithTrace: logLineWithTrace\n};\r\n"}